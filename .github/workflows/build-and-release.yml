name: Build and Release

on:
  push:
  pull_request:
  workflow_call:

permissions:
  contents: write
  pull-requests: write

jobs:
  build-and-release:
    env:
      tools: ${{ github.workspace }}/tools
      git: ${{ github.workspace }}/git
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Create build dirs
        run: |
          mkdir -p ${{ env.tools }}
          mkdir -p ${{ env.git }}

      - name: Install apt packages
        run: |
          sudo add-apt-repository ppa:inkscape.dev/stable
          sudo apt-get update
          sudo apt-get install -y libtool-bin
          sudo apt-get install -y tcl-dev tk-dev libcairo-dev
          sudo apt-get install -y python3 libxaw7-dev libreadline6-dev
          sudo apt-get install -y libxpm-dev libx11-dev flex
          sudo apt-get install -y inkscape

      - name: Install xschem
        run: |
          cd ${{ env.git }}
          git clone --depth 1 https://github.com/StefanSchippers/xschem.git
          cd xschem
          ./configure --prefix=${{ env.tools }}/xschem
          make -j`nproc`
          make install
          echo "${{ env.tools }}/xschem/bin" >> $GITHUB_PATH

      - name: Install netgen
        run: |
          cd ${{ env.git }}
          git clone --depth 1 https://github.com/RTimothyEdwards/netgen.git
          cd netgen
          ./configure --prefix=${{ env.tools }}/netgen
          make -j`nproc`
          make install
          echo "${{ env.tools }}/netgen/bin" >> $GITHUB_PATH

      - name: Generate PDK files
        run: |
          cd ${{ env.tools }}
          python3 -m venv volare-venv
          volare-venv/bin/python3 -m pip install --upgrade --no-cache-dir volare
          export PDK_ROOT=${{ env.tools }}/volare-pdks
          volare-venv/bin/volare ls-remote --pdk sky130
          # https://github.com/RTimothyEdwards/open_pdks/tree/0fe599b2afb6708d281543108caf8310912f54af
          volare-venv/bin/volare enable 0fe599b2afb6708d281543108caf8310912f54af

      - name: LVS
        run: |
          export PDK_ROOT=${{ env.tools }}/volare-pdks
          make all_lvs

      - name: Generate SVGs
        run: |
          export PDK_ROOT=${{ env.tools }}/volare-pdks
          make all_svg

      - name: Tar
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          cd svg
          tar -czf cells.tar.gz *

      - name: Create Tag
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          echo "TAG_NAME=$(date +%Y.%m.%d.%H.%M)" >> "$GITHUB_ENV"
          git tag ${{ env.TAG_NAME }}
          git push origin ${{ env.TAG_NAME }}

      - name: Create Release
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: True
          omitBody: True
          tag: ${{ env.TAG_NAME }}
          artifacts: |
            svg/cells.tar.gz
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Identify Changed Schematics
        if: github.event_name == 'pull_request'
        run: |
          echo "Finding modified .sch files..."
          git fetch --deepen=${{ github.event.pull_request.commits }}
          MODIFIED_SCH=$(git diff --name-only origin/${{ github.base_ref }}...HEAD -- 'schematics/**/*.sch')
          if [ -z "$MODIFIED_SCH" ]; then
            echo "No new or modified schematics found."
            echo "SVG_FILES=" >> "$GITHUB_ENV"
          else
            echo "Modified schematics: $MODIFIED_SCH"
            echo "$MODIFIED_SCH" > modified_sch_files.txt
            SVG_FILES=$(echo "$MODIFIED_SCH" | sed 's|schematics/|svg/|g' | sed 's|.sch|.svg|g')
            echo "SVG_FILES=$SVG_FILES" >> "$GITHUB_ENV"
          fi

      - name: Upload New SVGs as Artifact
        if: github.event_name == 'pull_request' && env.SVG_FILES != ''
        id: artifact-upload
        uses: actions/upload-artifact@v4
        with:
          name: svg-previews
          path: ${{ env.SVG_FILES }}
          retention-days: 7

      - name: Comment on PR with SVG artifact link
        if: github.event_name == 'pull_request' && env.SVG_FILES != ''
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const prNumber = context.issue.number;
            const runUrl = `https://github.com/${owner}/${repo}/actions/runs/${context.runId}`;
            const artifactUrl = `${{ steps.artifact-upload.outputs.artifact-url }}`;
            const commentBody = `### :art: SVGs Generated :art: \n\n SVGs previews were generated by this [this workflow run](${runUrl}) and can be downloaded [here](${artifactUrl}).`;
            github.rest.issues.createComment({
              owner,
              repo,
              issue_number: prNumber,
              body: commentBody
            });
