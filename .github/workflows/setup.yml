name: Setup

on:
  push:
  # pull_request:
  workflow_dispatch:

jobs:
  build:
    env:
      tools: ${{ github.workspace }}/tools
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Free Memory
        run: |
              sudo rm -rf /usr/share/dotnet
              sudo rm -rf "$AGENT_TOOLSDIRECTORY"

      - name: Install Dependencies
        run: |
              sudo apt-get update
              sudo apt-get install -y python3
              sudo apt-get install -y tk-dev libxpm-dev tcl-dev libx11-dev flex libtool-bin libxaw7-dev libreadline6-dev libcairo2-dev m4 tcsh

      - name: Install magic
        run: |
              git clone --depth 1 https://github.com/RTimothyEdwards/magic
              cd magic
              ./configure --prefix=${{ env.tools }}/magic
              make -j`nproc`
              make install
              echo "${{ env.tools }}/magic/bin" >> $GITHUB_PATH

      - name: Install ngspice
        run: |
              git clone --depth 1 git://git.code.sf.net/p/ngspice/ngspice
              cd ngspice
              mkdir -p build
              ./autogen.sh
              cd build
              ../configure \
               --prefix=${{ env.tools }}/ngspice \
               --with-x \
               --enable-xspice \
               --disable-debug \
               --enable-cider \
               --with-readline=yes \
               --enable-openmp \
               --enable-osdi
              make -j`nproc`
              make install
              echo "${{ env.tools }}/ngspice/bin" >> $GITHUB_PATH

      - name: Install xschem
        run: |
              git clone --depth 1 https://github.com/StefanSchippers/xschem.git xschem
              cd xschem
              ./configure --prefix=${{ env.tools }}/xschem
              make -j`nproc`
              make install
              echo "${{ env.tools }}/xschem/bin" >> $GITHUB_PATH

      - name: Install netgen
        run: |
              git clone --depth 1 https://github.com/RTimothyEdwards/netgen.git
              cd netgen
              ./configure --prefix=${TOOLS}/netgen
              make -j`nproc`
              make install
              echo "${{ env.tools }}/netgen/bin" >> $GITHUB_PATH

      - name: Generate PDK files
        run: |
              git clone --depth 1 git://opencircuitdesign.com/open_pdks
              cd open_pdks
              ./configure \
               --prefix=${{ env.tools }}/open_pdks \
               --enable-sky130-pdk \
               --with-sky130-variants=A \
               --enable-primitive-sky130 \
               --enable-io-sky130 \
               --disable-sc-hs-sky130 \
               --disable-sc-ms-sky130 \
               --disable-sc-ls-sky130 \
               --disable-sc-lp-sky130 \
               --enable-sc-hd-sky130 \
               --disable-sc-hdll-sky130 \
               --disable-sc-hvl-sky130 \
               --disable-alpha-sky130 \
               --enable-xschem-sky130 \
               --disable-sram-sky130 \
               --disable-osu-t12-sky130 \
               --disable-osu-t15-sky130 \
               --disable-osu-t18-sky130
              make -j`nproc`
              make install
              make veryclean

      - name: Download Caravel
        run: |
              git clone --depth 1 https://github.com/efabless/caravel.git
              make -C caravel gds/chip_io.gds
              export CARAVEL_ROOT=${{ github.workspace }}/caravel

      - name: Download Backend Layout Check Scripts
        run: |
              git clone --depth 1 https://github.com/d-m-bailey/extra_be_checks.git backend_layout_checks
              export LVS_ROOT=${{ github.workspace }}/backend_layout_checks

      - name: Verifiy Installation with Mitch Bailey's sky130_io Schematics
        run: |
              git clone --depth 1 https://github.com/d-m-bailey/sky130_fd_io.git mitch_bailey_sky130_io_schematics
              cd mitch_bailey_sky130_io_schematics
              export WORK_ROOT=${{ github.workspace }}/mitch_bailey_sky130_io_schematics/work/top_gpiov2
              export PDKPATH=${{ env.tools }}/open_pdks/share/pdk/sky130A
              export PDK_ROOT=${{ env.tools }}/open_pdks/share/pdk
              export PDK=sky130A
              xschem --log test.log <<EOF
                xschem load top_gpiov2.sch
                set lvs_netlist 1
                set netlist_dir [xschem get current_dirname]/simulation
                xschem netlist
                xschem exit closewindow force
              EOF
              grep "Symbol not found" test.log && exit 1 || echo "No Symbol Errors"
              $LVS_ROOT/run_full_lvs lvs/top_gpiov2/lvs_config.json
